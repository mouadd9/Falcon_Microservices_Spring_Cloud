# this will contain configuration shared across all microservices

# EUREKA INSTANCE CONFIGURATION
# --- This is a global convention for how all service instances identify themselves ---
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
# Use the instance's IP address in its registration, which is often preferred in containerized environments like Docker.
eureka.instance.prefer-ip-address=true
# How often this instance sends a heartbeat to Eureka (in seconds).
eureka.instance.lease-renewal-interval-in-seconds=10
# How long Eureka waits for a heartbeat before removing this instance from the registry (in seconds).
eureka.instance.lease-expiration-duration-in-seconds=30
# --- Health Check Integration with Spring Boot Actuator ---
# Tells Eureka to use the /actuator/health endpoint to determine if the service is UP or DOWN.
eureka.instance.health-check-url-path=${server.servlet.context-path:}/actuator/health
# Provides a link in the Eureka dashboard to the service's /actuator/info endpoint.
eureka.instance.status-page-url-path=${server.servlet.context-path:}/actuator/info

# EUREKA CLIENT CONFIGURATION : Defines how this service interacts with the Eureka Server.
# Set to true to register this service with Eureka.
eureka.client.register-with-eureka=true
# Set to true to fetch the registry of other services from Eureka.
eureka.client.fetch-registry=true
# How often (in seconds) to fetch the registry updates from the Eureka server.
eureka.client.registry-fetch-interval-seconds=30

# ACTUATOR CONFIGURATION : Explicitly expose the 'health' and 'info' endpoints over HTTP so Eureka can access them.
management.endpoints.web.exposure.include=*
# Shows full health details (e.g., disk space, DB connection) when requested by an authenticated user.
# management.endpoint.health.show-details=when_authorized