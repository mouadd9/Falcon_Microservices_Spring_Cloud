next we need to implement the sign-up endpoint :
  - this sign-up endpoint will receive a signUpRequest Object, then it will check if the code is expired or incorrect.
  - if all goes well then the endpoint will create a new entry in the User table.
  - and then we should make a jwt generator (we already created the encoder)
  - and then we will return a jwt to the user so he can log in.
  - so at some point after the creation of the user, a jwt will be created using the following information :
    - instant of the creation
    - scope 'roles' of the user.
    - issuer is self our backend is the issuer
    - when will the token be expired
    - username of the user

    so before we used to only create the token when the user logs in, thus we used the authentication manager to retrieve information about an already existing user in the database



   // this authentication manager uses the User repository to check if the user with these credentials exist
           Authentication authentication = authenticationManager.authenticate( new UsernamePasswordAuthenticationToken(loginDetails.getUsername(), loginDetails.getPassword()));

           Instant instant = Instant.now();

           String scope = authentication.getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(Collectors.joining(" "));

           JwtClaimsSet jwtClaimsSet = JwtClaimsSet.builder()
                   .issuer("self")
                   .issuedAt(instant)
                   .expiresAt(instant.plus(8, ChronoUnit.HOURS))
                   .subject(authentication.getName())
                   .claim("scope",scope )
                   .build();

           String jwt = this.jwtEncoder.encode(JwtEncoderParameters.from(jwtClaimsSet)).getTokenValue();

           return Map.of("access-token", jwt);